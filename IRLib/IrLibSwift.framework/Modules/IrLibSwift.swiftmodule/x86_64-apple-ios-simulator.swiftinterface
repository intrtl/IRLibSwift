// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IrLibSwift
import BugfenderSDK
import CoreImage
import Foundation
import MapKit
import Realm
import Swift
import SystemConfiguration
import UIKit
import YandexMobileMetrica
import _Concurrency
@_inheritsConvenienceInitializers @objc public class ScreenTimeEvent : Realm.RLMObject {
  @objc dynamic public var id: Swift.String
  @objc dynamic public var name: Swift.String
  @objc dynamic public var duration: Swift.Int
  @objc dynamic public var date: Swift.String
  @objc dynamic public var portalUrl: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultActualAssortment : Realm.RLMObject {
  @objc dynamic public var productId: Swift.String
  @objc dynamic public var externalId: Swift.String?
  @objc dynamic public var categoryId: Swift.String?
  @objc dynamic public var facing: Swift.Int
  @objc dynamic public var price: Swift.String?
  @objc dynamic public var priceType: Swift.Int
  @objc dynamic public var width: IrLibSwift.RecognitionResultWidth?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol StoreDetailsOutput {
  @objc func didTriggerStartShootingForTaskWithId(_ taskId: Swift.String?, valuesUpdateHandler: @escaping (() -> Swift.Void))
  @objc func didTriggerOpenOsaReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenSosReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenPriceExecutionReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenOosReport()
  @objc func didTriggerOpenSummaryReportForStoreWithId(_ storeId: Swift.Int)
  @objc func didStartVisitForStoreWithId(_ storeId: Swift.Int)
  @objc func didFinishVisitForStoreWithId(_ storeId: Swift.Int, readyToFinishHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc func didTriggerFetchAnketForStoreWithId(_ storeId: Swift.Int, completion: (() -> Swift.Void)?)
  @objc func didTriggerOpenAnket(storeId: Swift.Int, visitId: Swift.String?, shouldOnlyView: Swift.Bool)
  @objc func didTriggerOpenSupport()
  @objc func didTriggerOpenAssortmentMatrixForStoreWithId(_ storeId: Swift.Int)
}
@_hasMissingDesignatedInitializers public class DefaultScreensBuilder {
  public func storesViewController(output: IrLibSwift.StoresModuleOutput) -> UIKit.UIViewController
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultRealogram : Realm.RLMObject {
  @objc dynamic public var id: Swift.String
  @objc dynamic public var productId: Swift.String
  @objc dynamic public var productName: Swift.String?
  @objc dynamic public var tinyName: Swift.String?
  @objc dynamic public var statusId: Swift.Int
  @objc dynamic public var x1: Swift.Int
  @objc dynamic public var y1: Swift.Int
  @objc dynamic public var x2: Swift.Int
  @objc dynamic public var y2: Swift.Int
  @objc dynamic public var x01: Swift.Int
  @objc dynamic public var y01: Swift.Int
  @objc dynamic public var x02: Swift.Int
  @objc dynamic public var y02: Swift.Int
  @objc dynamic public var isUserBrand: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IRDataManagerSettings : ObjectiveC.NSObject {
  @objc public init(authInfoProvider: IrLibSwift.IRAuthInfoProvider, dbSettingsProvider: IrLibSwift.IRDataBaseSettingsProvider, sharedSettings: IrLibSwift.IRSharedSettings, installId: Swift.String, notificationPrefix: Swift.String?)
  @objc deinit
}
@objc public class IRAuthInfoProvider : ObjectiveC.NSObject, Swift.Codable {
  @objc public var userToken: Swift.String
  @objc public var basePath: Swift.String {
    @objc get
    @objc set
  }
  @objc public var domain: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isMultiportal: Swift.Bool
  @objc public init(userToken: Swift.String, basePath: Swift.String, domain: Swift.String, isMultiportal: Swift.Bool)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class GradientNavigationBarCustomizer : IrLibSwift.NavigationBarCustomizer {
  final public let viewsToHide: [UIKit.UIView]
  public var rightTapTarget: Any?
  public var rightTapAction: ObjectiveC.Selector?
  public init(gradient: IrLibSwift.Gradient, textColor: UIKit.UIColor)
  public func setup(navigationItem: UIKit.UINavigationItem, navigationController: UIKit.UINavigationController?, buttonTapTarget: Any?, action: ObjectiveC.Selector?)
  public func setupCustomNavigationBar()
  public func updateToDefault()
  public func updateToCustom()
  @objc deinit
}
public protocol NavigationBarCustomizer {
  var viewsToHide: [UIKit.UIView] { get }
  var rightTapTarget: Any? { get set }
  var rightTapAction: ObjectiveC.Selector? { get set }
  func setup(navigationItem: UIKit.UINavigationItem, navigationController: UIKit.UINavigationController?, buttonTapTarget: Any?, action: ObjectiveC.Selector?)
  func setupCustomNavigationBar()
  func updateToDefault()
  func updateToCustom()
}
@_inheritsConvenienceInitializers @objc public class TaskAttachment : Realm.RLMObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IRDataManager : ObjectiveC.NSObject, IrLibSwift.IRDataManagerProtocol {
  @objc public init(settings: IrLibSwift.IRDataManagerSettings)
  @objc public static func updateAppInfo(isApp: Swift.Bool)
  @objc public static func updateDeeplinkInfo(isStartedViaDeeplink: Swift.Bool)
  @objc public func fetchStores(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func clearStoresLoadDate()
  @discardableResult
  @objc public func createVisit(storeId: Swift.Int, externalStoreId: Swift.String?) throws -> Swift.String
  @objc public func sendCurrentVisit()
  @objc public func fetchRecognitionResult(photoId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func sendReadyPhoto(_ photoId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func deletePhoto(_ photoId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func photosReadyToSend(visitId: Swift.String?) -> [IrLibSwift.Photo]
  @objc public func photosReadyToSend() -> [IrLibSwift.Photo]
  @objc public func deletedPhotosReadyToSend() -> [IrLibSwift.DeletedPhoto]
  @objc public func readyToSendSentOrFinishedPhotos(sceneId: Swift.String) -> [IrLibSwift.Photo]
  @objc public func recognitionResultRecivedCompletelyForPhoto(id: Swift.String) -> Swift.Bool
  @objc public func photosWithNoRecognitionResult() -> [IrLibSwift.Photo]
  @objc public func canDoRecognitionResult(photoId: Swift.String) -> Swift.Bool
  @objc public func updateCurrentStore(storeId: Swift.Int, externalStoreId: Swift.String?)
  @objc public func updateExternalData(visitId: Swift.String)
  @objc public static func updateExternalData(visitId: Swift.String)
  @objc public static func clearExternalData()
  @objc public func updateCurrentUser(name: Swift.String, externalId: Swift.String)
  @objc public static func updateCurrentUser(name: Swift.String, externalId: Swift.String?)
  @objc public func updateSettings(from settings: IrLibSwift.IRDataManagerSettings)
  @objc public func fetchWidgets(visitId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func visitsWithNoWidgets() -> [IrLibSwift.Visit]
  @objc public func defaultMatrixFromVisit(visitId: Swift.String, widgetType: Swift.String, taskId: Swift.String?) -> IrLibSwift.VisitWidgetMatrix?
  @objc public func widgetMacroCategoriesForVisit(visitId: Swift.String, widgetType: Swift.String, matrixType: Swift.String?, taskId: Swift.String?) -> [IrLibSwift.VisitWidgetMacroCategory]?
  @objc public func widgetMatrixForVisit(visitId: Swift.String, widgetType: Swift.String, matrixType: Swift.String, taskId: Swift.String?) -> IrLibSwift.VisitWidgetMatrix?
  @objc public func widgetMatricesForVisit(visitId: Swift.String, widgetType: Swift.String, taskId: Swift.String?) -> [IrLibSwift.VisitWidgetMatrix]?
  @objc public func widgetTasksForVisit(visitId: Swift.String, widgetType: Swift.String) -> [IrLibSwift.VisitWidgetTasksData]?
  @objc public func updateProductForVisit(visitId: Swift.String, widgetType: Swift.String, matrixType: Swift.String, taskId: Swift.String?, macroCategoryId: Swift.String, productId: Swift.String, reasonId: Swift.Int, comment: Swift.String?)
  @objc public func fetchSegments(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func fetchTasks(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func cachedTasksCount() -> Swift.Int
  @objc public func fetchVisitsPlansAndFacts(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func fetchPreviousVisits(limit: Swift.Int, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func fetchPreviousVisit(visitId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func downloadPhotosForPreviousVisits(visitId: Swift.String?, limit: Swift.Int, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func updatePhotoResultIntervals(_ intervals: [Swift.Int])
  @objc public func deletePhotoWithId(_ id: Swift.String)
  @objc public func deletePhotoWithIdWithoutQueue(_ id: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public func cancelRequests()
  @objc public func saveStore(externalId: Swift.String) -> Swift.Int
  @objc public func finishCurrentVisit()
  @objc public func internalTaskId(externalVisitId: Swift.String, taskId: Swift.String?) -> Swift.String?
  @objc public func logScreenTimeEvent(id: Swift.String, name: Swift.String, duration: Swift.Int)
  @objc deinit
}
public enum GradientDirection {
  case topToBottom
  case leftToRight
  case leftTopToRightBottom
  case leftBottomToRightTop
  public static func == (a: IrLibSwift.GradientDirection, b: IrLibSwift.GradientDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class IRGradientDirection : ObjectiveC.NSObject {
  @objc final public let startPoint: CoreGraphics.CGPoint
  @objc final public let endPoint: CoreGraphics.CGPoint
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class IRGradientDirections : ObjectiveC.NSObject {
  @objc public static let topToBottom: IrLibSwift.IRGradientDirection
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VisitWidget : Realm.RLMObject {
  @objc dynamic public var type: Swift.String
  @objc dynamic public var data: Realm.RLMArray<IrLibSwift.VisitWidgetMatrix>
  @objc dynamic public var tasksData: Realm.RLMArray<IrLibSwift.VisitWidgetTasksData>
  @objc override dynamic public init()
  @objc deinit
}
public struct Shadow {
}
public struct AnketDataEntity {
}
extension IrLibSwift.AnketDataEntity {
  public struct Question {
  }
}
extension IrLibSwift.AnketDataEntity.Question {
  public struct Answer {
  }
}
public struct GradientColor {
  public let colors: [UIKit.UIColor]
}
extension IrLibSwift.GradientColor {
  public static let blue: IrLibSwift.GradientColor
  public static let red: IrLibSwift.GradientColor
  public static let violet: IrLibSwift.GradientColor
  public static let gray: IrLibSwift.GradientColor
  public static let green: IrLibSwift.GradientColor
  public static let mavi: IrLibSwift.GradientColor
  public static let blueToOrange: IrLibSwift.GradientColor
  public static let orangeToBlue: IrLibSwift.GradientColor
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultTotal : Realm.RLMObject {
  @objc dynamic public var value: Swift.Int
  @objc dynamic public var previousValue: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IRNewScreensBuilder : ObjectiveC.NSObject {
  @objc public init(settings: IrLibSwift.IRDataManagerSettings)
  @objc public func storesScreen(output: IrLibSwift.StoresModuleOutput) -> UIKit.UIViewController
  @objc public func filtersScreen(resultsOutput: IrLibSwift.StoresModuleOutput) -> UIKit.UIViewController
  @objc public func widgetsController() -> IrLibSwift.WidgetsModuleInput
  @objc public func storeDetailScreen(output: IrLibSwift.StoreDetailsOutput, storeId: Swift.Int) -> UIKit.UIViewController
  @objc public func taskDetailScreen(output: IrLibSwift.TaskDetailsModuleOutput, internalTaskId: Swift.String) -> UIKit.UIViewController
  @objc public func visitStatsScreen(visitId: Swift.String) -> UIKit.UIViewController
  @objc public func reportFiltersScreen(output: IrLibSwift.ReportFiltersModuleOutput, storeId: Swift.Int, visitId: Swift.String, taskId: Swift.String?, productGroupCode: Swift.String?, productGroupName: Swift.String?, currentReportType: Swift.String?) -> UIKit.UIViewController
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Fix_scenes : Realm.RLMObject {
  @objc dynamic public var visit_id: Swift.String
  @objc dynamic public var scene_id: Swift.String
  @objc dynamic public var taskId: Swift.String
  @objc dynamic public var scene_no: Swift.Int
  @objc dynamic public var photo_number: Swift.Int
  @objc dynamic public var is_recived_plano: Swift.Int
  @objc dynamic public var is_recived_assortment: Swift.Int
  @objc dynamic public var is_recived_shareshelf: Swift.Int
  @objc dynamic public var is_recived_shareshelf_custom: Swift.Int
  @objc dynamic public var is_plano_error: Swift.Int
  @objc dynamic public var is_assortment_error: Swift.Int
  @objc dynamic public var plano_error_text: Swift.String
  @objc dynamic public var is_error: Swift.Int
  @objc dynamic public var error_text: Swift.String
  @objc dynamic public var assortment_error_text: Swift.String
  @objc dynamic public var is_closed: Swift.Int
  @objc dynamic public var is_deleted: Swift.Int
  @objc dynamic public var scene_type: Swift.Int
  @objc dynamic public var is_sended_attributes: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func applyGradient(gradient: IrLibSwift.Gradient, mask: QuartzCore.CALayer? = nil) -> QuartzCore.CAGradientLayer
}
extension QuartzCore.CAGradientLayer {
  @discardableResult
  public func changeColor(to gradient: IrLibSwift.Gradient) -> QuartzCore.CAGradientLayer
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultSceneGroup : Realm.RLMObject {
  @objc dynamic public var id: Swift.Int
  @objc dynamic public var facingFact: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AiletGradientColor : ObjectiveC.NSObject {
  @objc final public let colors: [UIKit.UIColor]
  @objc final public let direction: IrLibSwift.IRGradientDirection
  @objc deinit
}
@objc public class IRSharedSettings : ObjectiveC.NSObject {
  @objc final public let storesSettings: IrLibSwift.IRStoresSharedSettings?
  @objc final public let locationError: IrLibSwift.IRGeolocationErrorSharedSettings
  @objc final public let photoApproveMode: IrLibSwift.IRPhotoApproveMode
  @objc final public let shouldSyncManually: Swift.Bool
  @objc final public let LOAReasonRequired: Swift.Bool
  @objc public init(storesSettings: IrLibSwift.IRStoresSharedSettings, locationError: IrLibSwift.IRGeolocationErrorSharedSettings, photoApproveMode: IrLibSwift.IRPhotoApproveMode, shouldSyncManually: Swift.Bool, LOAReasonRequired: Swift.Bool)
  @objc deinit
}
@objc public class IRStoresSharedSettings : ObjectiveC.NSObject {
  @objc public var forceUpdateInterval: Foundation.NSNumber?
  @objc public init(forceUpdateInterval: Foundation.NSNumber?)
  @objc deinit
}
@objc public class IRGeolocationErrorSharedSettings : ObjectiveC.NSObject {
  @objc public var type: IrLibSwift.IRLocationErrorBlockType
  @objc public var threshold: Swift.Int
  @objc public init(type: IrLibSwift.IRLocationErrorBlockType, threshold: Swift.Int)
  @objc deinit
}
@objc public enum IRLocationErrorBlockType : Swift.Int, Swift.Codable {
  case none
  case full
  case partial
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IRPhotoApproveMode : Swift.Int, Swift.Codable {
  case manual
  case automatic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class CustomImageCheckbox : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) public var selectedHandler: ((_ isSelected: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var selectedImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var deselectedImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc extension IrLibSwift.CustomImageCheckbox {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setIsSelected(_ isSelected: Swift.Bool)
}
public enum Fonts {
  public enum Title1 {
    public static let normal: UIKit.UIFont
    public static let bold: UIKit.UIFont
  }
  public enum Headline {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
  public enum Body {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
  public enum CallOut {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
  public enum Subheadline {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
  public enum Footnote {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
  public enum Caption {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
  public enum SmallCaption {
    public static let normal: UIKit.UIFont
    public static let semibold: UIKit.UIFont
    public static let italic: UIKit.UIFont
  }
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetTotal : Realm.RLMObject {
  @objc dynamic public var value: Swift.Int
  @objc dynamic public var diff: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class NetworkReachability {
  public typealias NetworkReachable = (IrLibSwift.NetworkReachability) -> ()
  public typealias NetworkUnreachable = (IrLibSwift.NetworkReachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: IrLibSwift.NetworkReachability.NetworkStatus, b: IrLibSwift.NetworkReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: IrLibSwift.NetworkReachability.Connection
    public static func == (a: IrLibSwift.NetworkReachability.Connection, b: IrLibSwift.NetworkReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: IrLibSwift.NetworkReachability.NetworkReachable?
  public var whenUnreachable: IrLibSwift.NetworkReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: IrLibSwift.NetworkReachability.Connection {
    get
  }
  public var connection: IrLibSwift.NetworkReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension IrLibSwift.NetworkReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultWidth : Realm.RLMObject {
  @objc dynamic public var cm: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetAssortmentGroup : Realm.RLMObject {
  @objc dynamic public var planBySku: Swift.Int
  @objc dynamic public var osaBySku: Swift.Int
  @objc dynamic public var osaBySkuPercentage: Swift.Double
  @objc dynamic public var planByShelf: Swift.Int
  @objc dynamic public var osaByShelf: Swift.Int
  @objc dynamic public var osaByShelfPercentage: Swift.Double
  @objc dynamic public var planByFacing: Swift.Int
  @objc dynamic public var osaByFacing: Swift.Int
  @objc dynamic public var osaByFacingPercentage: Swift.Double
  @objc dynamic public var products: Realm.RLMArray<IrLibSwift.VisitWidgetProduct>
  @objc dynamic public var assortmentGroupName: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultLack : Realm.RLMObject {
  @objc dynamic public var total: IrLibSwift.RecognitionResultTotal?
  @objc dynamic public var values: Realm.RLMArray<IrLibSwift.RecognitionResultValue>
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class VisitTask : Realm.RLMObject {
  @objc dynamic public var taskId: Swift.String
  @objc dynamic public var taskPk: Swift.Int
  @objc dynamic public var internalId: Swift.String
  @objc dynamic public var name: Swift.String
  @objc dynamic public var text: Swift.String
  @objc dynamic public var isDisabled: Swift.Bool
  @objc dynamic public var isRequired: Swift.Bool
  @objc dynamic public var shouldUseAllVisitPhotos: Swift.Bool
  @objc dynamic public var isPhotoRequired: Swift.Bool
  @objc dynamic public var sceneTypeIds: Realm.RLMArray<IrLibSwift.RealmString>
  @objc dynamic public var order: Swift.Int
  @objc dynamic public var visitImage: Swift.String?
  @objc dynamic public var attachments: Realm.RLMArray<IrLibSwift.TaskAttachment>
  @objc dynamic public var kpis: Realm.RLMArray<IrLibSwift.TaskKpi>
  @objc dynamic public var questions: Realm.RLMArray<IrLibSwift.TaskQuestion>
  @objc dynamic public var matrixType: Swift.String
  @objc dynamic public var totalScoreCountType: Swift.String
  @objc override dynamic public class func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Store : Realm.RLMObject {
  @objc dynamic public var storeId: Swift.Int
  @objc dynamic public var storeIdString: Swift.String
  @objc dynamic public var externalId: Swift.String?
  @objc dynamic public var name: Swift.String
  @objc dynamic public var retailerName: Swift.String?
  @objc dynamic public var address: Swift.String
  @objc dynamic public var segmentId: Swift.String?
  @objc dynamic public var segmentName: Swift.String?
  @objc dynamic public var storeTypeName: Swift.String?
  @objc dynamic public var lat: Swift.Double
  @objc dynamic public var lon: Swift.Double
  @objc dynamic public var distance: Swift.Double
  @objc dynamic public var cityName: Swift.String?
  @objc override dynamic public class func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public class TransparentNavigationBarCustomizer : IrLibSwift.NavigationBarCustomizer {
  final public let viewsToHide: [UIKit.UIView]
  public var rightTapTarget: Any?
  public var rightTapAction: ObjectiveC.Selector?
  public init(textColor: UIKit.UIColor)
  public func setup(navigationItem: UIKit.UINavigationItem, navigationController: UIKit.UINavigationController?, buttonTapTarget: Any?, action: ObjectiveC.Selector?)
  public func setupCustomNavigationBar()
  public func updateToDefault()
  public func updateToCustom()
  @objc deinit
}
@objc public protocol IRDataBaseSettingsProvider {
  @objc var realmConfig: Realm.RLMRealmConfiguration { get }
  @objc var previousDbVersion: Foundation.NSNumber? { get }
}
extension UIKit.UIImage {
  convenience public init?(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
}
@objc public protocol BarButtonShowing {
  @objc func addBarButton(_ button: UIKit.UIBarButtonItem)
}
@objc public protocol StoresModuleOutput {
  @objc func didFinishLoadingCatalogs()
  @objc func didTriggerStartShootingForTaskWithId(_ taskId: Swift.String?, valuesUpdateHandler: @escaping (() -> Swift.Void))
  @objc func didTriggerOpenOsaReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenSosReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenPriceExecutionReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenOosReport()
  @objc func didStartVisitForStoreWithId(_ storeId: Swift.Int)
  @objc func didFinishVisitForStoreWithId(_ storeId: Swift.Int, readyToFinishHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc func didTriggerOpenAssortmentForStoreWithId(_ storeId: Swift.Int)
  @objc func didTriggerOpenSummaryReportForStoreWithId(_ storeId: Swift.Int)
  @objc func didTriggerFetchAnketForStoreWithId(_ storeId: Swift.Int, completion: (() -> Swift.Void)?)
  @objc func didTriggerOpenAnket(storeId: Swift.Int, visitId: Swift.String?, shouldOnlyView: Swift.Bool)
  @objc func didTriggerOpenSupport()
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultScene : Realm.RLMObject {
  @objc dynamic public var id: Swift.String
  @objc dynamic public var facingFact: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetProduct : Realm.RLMObject {
  @objc dynamic public var plan: Swift.Int
  @objc dynamic public var facingFact: Swift.Int
  @objc dynamic public var osaByFacing: Swift.Int
  @objc dynamic public var other: Swift.Int
  @objc dynamic public var groupFact: Swift.Int
  @objc dynamic public var price: Swift.Double
  @objc dynamic public var priceType: Swift.Int
  @objc dynamic public var productName: Swift.String
  @objc dynamic public var tinyName: Swift.String?
  @objc dynamic public var sceneType: Swift.Int
  @objc dynamic public var productId: Swift.String
  @objc dynamic public var productCategoryId: Swift.String?
  @objc dynamic public var brandId: Swift.String?
  @objc dynamic public var brandOwnerId: Swift.String?
  @objc dynamic public var isUserBrand: Swift.Bool
  @objc dynamic public var miniature: Swift.String?
  @objc dynamic public var comment: Swift.String?
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var priceStatus: Swift.Int
  @objc dynamic public var minRange: Swift.Double
  @objc dynamic public var maxRange: Swift.Double
  @objc dynamic public var reason: Swift.String?
  @objc dynamic public var reasonId: Swift.Int
  @objc public enum IRPriceStatus : Swift.Int {
    case notDetected = -1
    case notInRange = 0
    case inRange = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum IRPriceType : Swift.Int {
    case empty = -1
    case common = 0
    case promo = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Photo : Realm.RLMObject {
  @objc dynamic public var photoId: Swift.String
  @objc dynamic public var storeId: Swift.Int
  @objc dynamic public var externalStoreId: Swift.String?
  @objc dynamic public var visitId: Swift.String
  @objc dynamic public var externalVisitId: Swift.String?
  @objc dynamic public var sceneId: Swift.String
  @objc dynamic public var sceneTypeId: Swift.Int
  @objc dynamic public var sceneTypeName: Swift.String
  @objc dynamic public var taskId: Swift.String?
  @objc dynamic public var path: Swift.String?
  @objc dynamic public var imageUrl: Swift.String?
  @objc dynamic public var createdTime: Foundation.Date?
  @objc dynamic public var latitude: Swift.Double
  @objc dynamic public var longitude: Swift.Double
  @objc dynamic public var isDownloaded: Swift.Bool
  @objc dynamic public var isImageDownloaded: Swift.Bool
  @objc dynamic public var state: Swift.Int
  @objc dynamic public var sceneNumber: Swift.Int
  @objc dynamic public var photoNumber: Swift.Int
  @objc dynamic public var innerNumber: Swift.Int
  @objc dynamic public var maxNumber: Swift.Int
  @objc dynamic public var blur: Swift.Int
  @objc dynamic public var isQualityError: Swift.Bool
  @objc dynamic public var isGeolocationError: Swift.Bool
  @objc dynamic public var isTiltAngleError: Swift.Bool
  @objc dynamic public var isApproved: Swift.Bool
  @objc dynamic public var isSelected: Swift.Bool
  @objc dynamic public var isSceneClosed: Swift.Bool
  @objc dynamic public var errorState: Swift.Int
  @objc dynamic public var errorMessage: Swift.String?
  @objc dynamic public var sendPhotoAttemptsCounter: Swift.Int
  @objc dynamic public var timeNextAttemptToSendPhoto: Swift.Int
  @objc dynamic public var recognitionResultAttemptsCounter: Swift.Int
  @objc dynamic public var timeNextAttemptToRecognitionResult: Swift.Int
  @objc dynamic public var realogram: Realm.RLMArray<IrLibSwift.RecognitionResultRealogram>
  @objc dynamic public var actualAssortment: Realm.RLMArray<IrLibSwift.RecognitionResultActualAssortment>
  @objc public enum IRPhotoState : Swift.Int {
    case deleted = 1
    case notReadyToSend = 2
    case readyToSend = 3
    case notStitched = 4
    case notAnalysed = 5
    case notSaved = 6
    case sent = 7
    case finished = 8
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum IRPhotoErrorState : Swift.Int {
    case noError = 1
    case analyseError = 2
    case stitcherError = 3
    case sentError = 4
    case recognitionResultError = 5
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AiletFonts : ObjectiveC.NSObject {
  @objc public static let caption: IrLibSwift.AiletFonts.AiletFontsCaption
  @objc public static let subheadline: IrLibSwift.AiletFonts.AiletFontsSubheadline
  @objc public static let callout: IrLibSwift.AiletFonts.AiletFontsSubheadline
  @objc public static let headline: IrLibSwift.AiletFonts.AiletFontsHeadline
  @objc override dynamic public init()
  @objc deinit
}
extension IrLibSwift.AiletFonts {
  @_inheritsConvenienceInitializers @objc public class AiletFontsCaption : ObjectiveC.NSObject {
    @objc final public let normal: UIKit.UIFont
    @objc final public let semibold: UIKit.UIFont
    @objc final public let italic: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class AiletFontsSubheadline : ObjectiveC.NSObject {
    @objc final public let normal: UIKit.UIFont
    @objc final public let semibold: UIKit.UIFont
    @objc final public let italic: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class AiletFontsCallout : ObjectiveC.NSObject {
    @objc final public let normal: UIKit.UIFont
    @objc final public let semibold: UIKit.UIFont
    @objc final public let italic: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class AiletFontsHeadline : ObjectiveC.NSObject {
    @objc final public let normal: UIKit.UIFont
    @objc final public let semibold: UIKit.UIFont
    @objc final public let italic: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers public class TaskKpi : Realm.RLMObject {
  @objc dynamic public var name: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum IRNetworkError : Swift.Int {
  case noConnection = 503
  case authError = 403
  case processing = 202
  case serverError = 500
  case decodeError = 901
  case encodeError = 902
  case responseDecodeError = 903
  case retryError = 904
  case noContent = 204
  case unknown = -1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Shadows {
  public static let elevation100: IrLibSwift.ComplexShadow
  public static let elevation300: IrLibSwift.ComplexShadow
}
@_inheritsConvenienceInitializers @objc public class DeletedPhoto : Realm.RLMObject {
  @objc dynamic public var photoId: Swift.String
  @objc dynamic public var state: Swift.Int
  @objc public enum IRDeletedPhotoState : Swift.Int {
    case readyToSend = 1
    case sent = 2
    case finished = 3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AiletColors : ObjectiveC.NSObject {
  @objc public static let background: IrLibSwift.AiletColors.AiletColorsBackground
  @objc public static let interactive: IrLibSwift.AiletColors.AiletColorsInteractive
  @objc public static let text: IrLibSwift.AiletColors.AiletColorsText
  @objc public static let icon: IrLibSwift.AiletColors.AiletColorsIcon
  @objc public static let input: IrLibSwift.AiletColors.AiletColorsInput
  @objc public static let support: IrLibSwift.AiletColors.AiletColorsSupport
  @objc public static let border: IrLibSwift.AiletColors.AiletColorsBorder
  @objc public static let accent: IrLibSwift.AiletColors.AiletColorsAccent
  @objc public static let gradient: IrLibSwift.AiletColors.AiletColorsGradient
  @objc override dynamic public init()
  @objc deinit
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsBackground : ObjectiveC.NSObject {
    @objc final public let primary: UIKit.UIColor
    @objc final public let background01: UIKit.UIColor
    @objc final public let background02: UIKit.UIColor
    @objc final public let background03: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsInteractive : ObjectiveC.NSObject {
    @objc final public let primary: UIKit.UIColor
    @objc final public let secondary: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsText : ObjectiveC.NSObject {
    @objc final public let primary: UIKit.UIColor
    @objc final public let secondary: UIKit.UIColor
    @objc final public let placeholder: UIKit.UIColor
    @objc final public let interactive: UIKit.UIColor
    @objc final public let error: UIKit.UIColor
    @objc final public let success: UIKit.UIColor
    @objc final public let links: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsIcon : ObjectiveC.NSObject {
    @objc final public let primary: UIKit.UIColor
    @objc final public let secondary: UIKit.UIColor
    @objc final public let interactive: UIKit.UIColor
    @objc final public let onInteractiveColors: UIKit.UIColor
    @objc final public let accent01: UIKit.UIColor
    @objc final public let accent02: UIKit.UIColor
    @objc final public let accent03: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsInput : ObjectiveC.NSObject {
    @objc final public let primary: UIKit.UIColor
    @objc final public let secondary: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsSupport : ObjectiveC.NSObject {
    @objc final public let error: UIKit.UIColor
    @objc final public let success: UIKit.UIColor
    @objc final public let warning: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsBorder : ObjectiveC.NSObject {
    @objc final public let primary: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsAccent : ObjectiveC.NSObject {
    @objc final public let accent01: UIKit.UIColor
    @objc final public let accent02: UIKit.UIColor
    @objc final public let accent03: UIKit.UIColor
    @objc final public let accent04: UIKit.UIColor
    @objc final public let accent05: UIKit.UIColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension IrLibSwift.AiletColors {
  @_inheritsConvenienceInitializers @objc public class AiletColorsGradient : ObjectiveC.NSObject {
    @objc final public let gradient01: IrLibSwift.AiletGradientColor
    @objc final public let gradient02: IrLibSwift.AiletGradientColor
    @objc final public let gradient03: IrLibSwift.AiletGradientColor
    @objc final public let gradient04: IrLibSwift.AiletGradientColor
    @objc final public let gradient06: IrLibSwift.AiletGradientColor
    @objc final public let gradient07: IrLibSwift.AiletGradientColor
    @objc override dynamic public init()
    @objc deinit
  }
}
extension Realm.RLMRealm {
  @nonobjc public class func schemaVersion(at url: Foundation.URL, usingEncryptionKey key: Foundation.Data? = nil) throws -> Swift.UInt64
  @nonobjc public func resolve<Confined>(reference: Realm.RLMThreadSafeReference<Confined>) -> Confined? where Confined : Realm.RLMThreadConfined
}
extension Realm.RLMObject {
  public class func objects(where predicateFormat: Swift.String, _ args: Swift.CVarArg...) -> Realm.RLMResults<Realm.RLMObject>
  public class func objects(in realm: Realm.RLMRealm, where predicateFormat: Swift.String, _ args: Swift.CVarArg...) -> Realm.RLMResults<Realm.RLMObject>
}
public struct RLMIterator<T> : Swift.IteratorProtocol {
  public mutating func next() -> T?
  public typealias Element = T
}
extension Realm.RLMArray : Swift.Sequence {
  public typealias Element = Realm.RLMObject
  public typealias Iterator = IrLibSwift.RLMIterator<Realm.RLMObject>
}
extension Realm.RLMResults : Swift.Sequence {
  public typealias Element = Realm.RLMObject
  public typealias Iterator = IrLibSwift.RLMIterator<Realm.RLMObject>
}
extension Realm.RLMCollection {
  public func makeIterator() -> IrLibSwift.RLMIterator<Realm.RLMObject>
}
extension Realm.RLMCollection {
  public func indexOfObject(where predicateFormat: Swift.String, _ args: Swift.CVarArg...) -> Swift.UInt
  public func objects(where predicateFormat: Swift.String, _ args: Swift.CVarArg...) -> Realm.RLMResults<ObjectiveC.NSObject>
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetMacroCategory : Realm.RLMObject {
  @objc dynamic public var planBySku: Swift.Int
  @objc dynamic public var osaBySku: Swift.Int
  @objc dynamic public var osaBySkuPercentage: Swift.Double
  @objc dynamic public var planByShelf: Swift.Int
  @objc dynamic public var osaByShelf: Swift.Int
  @objc dynamic public var osaByShelfPercentage: Swift.Double
  @objc dynamic public var planByFacing: Swift.Int
  @objc dynamic public var osaByFacing: Swift.Int
  @objc dynamic public var osaByFacingPercentage: Swift.Double
  @objc dynamic public var products: Realm.RLMArray<IrLibSwift.VisitWidgetProduct>
  @objc dynamic public var macroCategoryId: Swift.String
  @objc dynamic public var macroCategoryName: Swift.String
  @objc dynamic public var assortmentGroups: Realm.RLMArray<IrLibSwift.VisitWidgetAssortmentGroup>
  @objc dynamic public var value: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public enum Colors {
  public enum Background {
    public static let primary: UIKit.UIColor
    public static let background01: UIKit.UIColor
    public static let background02: UIKit.UIColor
    public static let background03: UIKit.UIColor
  }
  public enum Interactive {
    public static let primary: UIKit.UIColor
    public static let secondary: UIKit.UIColor
  }
  public enum Text {
    public static let primary: UIKit.UIColor
    public static let secondary: UIKit.UIColor
    public static let placeholder: UIKit.UIColor
    public static let interactive: UIKit.UIColor
    public static let error: UIKit.UIColor
    public static let success: UIKit.UIColor
    public static let links: UIKit.UIColor
  }
  public enum Icon {
    public static let primary: UIKit.UIColor
    public static let secondary: UIKit.UIColor
    public static let interactive: UIKit.UIColor
    public static let onInteractiveColors: UIKit.UIColor
    public static let accent01: UIKit.UIColor
    public static let accent02: UIKit.UIColor
    public static let accent03: UIKit.UIColor
  }
  public enum Input {
    public static let primary: UIKit.UIColor
    public static let secondary: UIKit.UIColor
  }
  public enum Support {
    public static let error: UIKit.UIColor
    public static let success: UIKit.UIColor
    public static let warning: UIKit.UIColor
  }
  public enum Border {
    public static let primary: UIKit.UIColor
  }
  public enum Accent {
    public static let accent01: UIKit.UIColor
    public static let accent02: UIKit.UIColor
    public static let accent03: UIKit.UIColor
    public static let accent04: UIKit.UIColor
    public static let accent05: UIKit.UIColor
  }
  public enum Gradients {
    public static let gradient01: IrLibSwift.Gradient
    public static let gradient02: IrLibSwift.Gradient
    public static let gradient03: IrLibSwift.Gradient
    public static let gradient04: IrLibSwift.Gradient
    public static let gradient06: IrLibSwift.Gradient
    public static let gradient07: IrLibSwift.Gradient
  }
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetBrand : Realm.RLMObject {
  @objc dynamic public var planBySku: Swift.Int
  @objc dynamic public var osaBySku: Swift.Int
  @objc dynamic public var osaBySkuPercentage: Swift.Double
  @objc dynamic public var planByShelf: Swift.Int
  @objc dynamic public var osaByShelf: Swift.Int
  @objc dynamic public var osaByShelfPercentage: Swift.Double
  @objc dynamic public var planByFacing: Swift.Int
  @objc dynamic public var osaByFacing: Swift.Int
  @objc dynamic public var osaByFacingPercentage: Swift.Double
  @objc dynamic public var products: Realm.RLMArray<IrLibSwift.VisitWidgetProduct>
  @objc dynamic public var brandId: Swift.String
  @objc dynamic public var brandName: Swift.String
  @objc dynamic public var assortmentGroups: Realm.RLMArray<IrLibSwift.VisitWidgetAssortmentGroup>
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WidgetsModuleInput {
  @objc func load()
  @objc func didOpenScreenWithActiveVisit()
  @objc func didOpenScreenWithInactiveVisit()
  @objc func didLeaveVisitRelatedScreen()
}
@_inheritsConvenienceInitializers @objc public class Visit : Realm.RLMObject {
  @objc dynamic public var visitId: Swift.String
  @objc dynamic public var userName: Swift.String
  @objc dynamic public var externalUserId: Swift.String?
  @objc dynamic public var externalId: Swift.String?
  @objc dynamic public var storeId: Swift.Int
  @objc dynamic public var storeName: Swift.String
  @objc dynamic public var externalStoreId: Swift.String?
  @objc dynamic public var timestamp: Swift.String
  @objc dynamic public var timestampFull: Swift.String
  @objc dynamic public var timestampStart: Swift.String
  @objc dynamic public var timestampEnd: Swift.String?
  @objc dynamic public var timestampLong: Swift.Int
  @objc dynamic public var isSended: Swift.Bool
  @objc dynamic public var isShareShelfReceived: Swift.Bool
  @objc dynamic public var isCustomShareShelfReceived: Swift.Bool
  @objc dynamic public var isWidgetReceived: Swift.Bool
  @objc dynamic public var notificationsCount: Swift.Int
  @objc dynamic public var isReportRequested: Swift.Int
  @objc dynamic public var isProductGroupReceived: Swift.Bool
  @objc dynamic public var isConfirmedWithReceivedReports: Swift.Bool
  @objc dynamic public var resultTasks: Realm.RLMArray<IrLibSwift.RecognitionResultTask>
  @objc dynamic public var resultOldAssortment: IrLibSwift.RecognitionResultOldAssortment?
  @objc dynamic public var widgets: Realm.RLMArray<IrLibSwift.VisitWidget>
  @objc dynamic public var latitude: Swift.Double
  @objc dynamic public var longitude: Swift.Double
  @objc dynamic public var isDownloaded: Swift.Bool
  @objc dynamic public var tasks: Realm.RLMArray<IrLibSwift.VisitTask>
  @objc dynamic public var wasFinished: Swift.Bool
  @objc override dynamic public class func primaryKey() -> Swift.String?
  @objc public var photoIdForGettingOldAssortment: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AnswersIR : Realm.RLMObject {
  @objc dynamic public var id: Swift.Int
  @objc dynamic public var question_id: Swift.Int
  @objc dynamic public var name: Swift.String
  @objc dynamic public var type: Swift.String
  @objc dynamic public var store_id: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public protocol ShadowShowing {
  var view: UIKit.UIView! { get }
  var backShadowView: UIKit.UIView! { get }
  var frontShadowView: UIKit.UIView! { get }
  func setupShadow(_ complexShadow: IrLibSwift.ComplexShadow, radius: CoreGraphics.CGFloat)
  func updateShadows(radius: CoreGraphics.CGFloat)
}
extension IrLibSwift.ShadowShowing where Self : UIKit.UIView {
  public func setupShadow(_ complexShadow: IrLibSwift.ComplexShadow, radius: CoreGraphics.CGFloat = 10)
  public func updateShadows(radius: CoreGraphics.CGFloat = 10)
}
@_inheritsConvenienceInitializers @objc public class TaskAnswer : Realm.RLMObject {
  @objc dynamic public var index: Swift.Int
  @objc dynamic public var type: Swift.String
  @objc dynamic public var name: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Segment : Realm.RLMObject {
  @objc dynamic public var segmentId: Swift.String
  @objc dynamic public var segmentPk: Swift.Int
  @objc dynamic public var name: Swift.String
  @objc override dynamic public class func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.KeyedDecodingContainer {
  public func decodeInt(forKey key: K) throws -> Swift.Int?
  public func decodeString(forKey key: K) throws -> Swift.String?
  public func decodeDoubleFromIntOrDouble(forKey key: K) throws -> Swift.Double?
  public func decodeIntFromDoubleOrInt(forKey key: K) throws -> Swift.Int?
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetTasksData : Realm.RLMObject {
  @objc dynamic public var taskId: Swift.String?
  @objc dynamic public var total: IrLibSwift.VisitWidgetTotal?
  @objc dynamic public var products: Realm.RLMArray<IrLibSwift.VisitWidgetProduct>
  @objc dynamic public var matrices: Realm.RLMArray<IrLibSwift.VisitWidgetMatrix>
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IRStoredStateSettings : ObjectiveC.NSObject {
  @objc required public init(settings: IrLibSwift.IRDataManagerSettings)
  @objc public var currentVisit: IrLibSwift.IRStoredStateSettingsVisit? {
    @objc get
  }
  @objc public var currentStore: IrLibSwift.IRStoredStateSettingsStore? {
    @objc get
  }
  @objc public func clearCurrentVisit()
  @objc public func updateCurrentStoreId(_ storeId: ObjectiveC.NSInteger)
  @objc public func updateCurrentExternalStoreId(_ externalStoreId: Swift.String)
  @objc public func updateCurrentUser(id: Swift.String, name: Swift.String, externalId: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IRStoredStateSettingsVisit : ObjectiveC.NSObject {
  @objc final public let visitId: Swift.String
  @objc final public let externalVisitId: Swift.String?
  @objc final public let userName: Swift.String
  @objc final public let externalUserId: Swift.String?
  @objc final public let startTimestamp: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IRStoredStateSettingsStore : ObjectiveC.NSObject {
  @objc final public let storeId: ObjectiveC.NSInteger
  @objc final public let externalStoreId: Swift.String?
  @objc final public let name: Swift.String?
  @objc deinit
}
public struct Gradient {
  public let color: IrLibSwift.GradientColor
  public let locations: [Foundation.NSNumber]
  public let direction: IrLibSwift.GradientDirection
  public init(color: IrLibSwift.GradientColor, locations: [Foundation.NSNumber], direction: IrLibSwift.GradientDirection)
}
@_inheritsConvenienceInitializers @objc public class RealmString : Realm.RLMObject {
  @objc dynamic public var stringValue: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ReportFiltersModuleOutput {
  @objc func didUpdateFilters(_ filters: IrLibSwift.IRReportFilters)
}
@_hasMissingDesignatedInitializers @objc public class IRReportFilters : ObjectiveC.NSObject {
  @objc final public let visitId: Swift.String
  @objc final public let storeId: Swift.Int
  @objc final public let storeName: Swift.String
  @objc final public let taskId: Swift.String?
  @objc final public let productGroupId: Swift.String?
  @objc final public let productGroupName: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class AiletPieChartView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public func addSegment(value: Swift.Float, color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public func resetSegments()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultAssortmentAchievement : Realm.RLMObject {
  @objc dynamic public var id: Swift.String
  @objc dynamic public var facingPlan: Swift.Int
  @objc dynamic public var facingFact: Swift.Int
  @objc dynamic public var productId: Swift.String?
  @objc dynamic public var externalId: Swift.String?
  @objc dynamic public var isUserBrand: Swift.Bool
  @objc dynamic public var productName: Swift.String?
  @objc dynamic public var brandName: Swift.String?
  @objc dynamic public var brandId: Swift.String?
  @objc dynamic public var categoryName: Swift.String?
  @objc dynamic public var macrocategoryId: Swift.String?
  @objc dynamic public var macrocategoryName: Swift.String?
  @objc dynamic public var categoryId: Swift.String?
  @objc dynamic public var isKey: Swift.Bool
  @objc dynamic public var facingReal: Swift.Int
  @objc dynamic public var productGroup: Realm.RLMArray<IrLibSwift.RecognitionResultProductGroup>
  @objc dynamic public var scene: Realm.RLMArray<IrLibSwift.RecognitionResultScene>
  @objc dynamic public var sceneGroup: Realm.RLMArray<IrLibSwift.RecognitionResultSceneGroup>
  @objc dynamic public var price: Swift.String?
  @objc dynamic public var isYellowPrice: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetMatrix : Realm.RLMObject {
  @objc dynamic public var total: IrLibSwift.VisitWidgetTotal?
  @objc dynamic public var matrixType: Swift.String
  @objc dynamic public var matrixTypeName: Swift.String
  @objc dynamic public var planBySku: Swift.Int
  @objc dynamic public var osaBySku: Swift.Int
  @objc dynamic public var osaBySkuPercentage: Swift.Double
  @objc dynamic public var planByShelf: Swift.Int
  @objc dynamic public var osaByShelf: Swift.Int
  @objc dynamic public var osaByShelfPercentage: Swift.Double
  @objc dynamic public var planByFacing: Swift.Int
  @objc dynamic public var osaByFacing: Swift.Int
  @objc dynamic public var osaByFacingPercentage: Swift.Double
  @objc dynamic public var products: Realm.RLMArray<IrLibSwift.VisitWidgetProduct>
  @objc dynamic public var assortmentGroups: Realm.RLMArray<IrLibSwift.VisitWidgetAssortmentGroup>
  @objc dynamic public var macroCategories: Realm.RLMArray<IrLibSwift.VisitWidgetMacroCategory>
  @objc dynamic public var brandOwners: Realm.RLMArray<IrLibSwift.VisitWidgetBrandOwner>
  @objc dynamic public var brands: Realm.RLMArray<IrLibSwift.VisitWidgetBrand>
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class IRStoredClassesInfoProvider : ObjectiveC.NSObject {
  @objc public class func storedClasses() -> [Any]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TaskQuestion : Realm.RLMObject {
  @objc dynamic public var index: Swift.Int
  @objc dynamic public var type: Swift.String
  @objc dynamic public var name: Swift.String
  @objc dynamic public var isRequired: Swift.Bool
  @objc dynamic public var answers: Realm.RLMArray<IrLibSwift.TaskAnswer>
  @objc dynamic public var selectedAnswers: Realm.RLMArray<IrLibSwift.RealmInt>
  @objc dynamic public var enteredAnswer: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultTask : Realm.RLMObject {
  @objc dynamic public var taskId: Swift.String
  @objc dynamic public var visitId: Swift.String
  @objc dynamic public var sourceId: Swift.String?
  @objc dynamic public var totalScore: Swift.Int
  @objc dynamic public var percentage: Swift.Double
  @objc dynamic public var averagePercentage: Swift.Double
  @objc dynamic public var kpis: Realm.RLMArray<IrLibSwift.TaskKpi>
  @objc override dynamic public class func primaryKey() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VisitWidgetBrandOwner : Realm.RLMObject {
  @objc dynamic public var planBySku: Swift.Int
  @objc dynamic public var osaBySku: Swift.Int
  @objc dynamic public var osaBySkuPercentage: Swift.Double
  @objc dynamic public var planByShelf: Swift.Int
  @objc dynamic public var osaByShelf: Swift.Int
  @objc dynamic public var osaByShelfPercentage: Swift.Double
  @objc dynamic public var planByFacing: Swift.Int
  @objc dynamic public var osaByFacing: Swift.Int
  @objc dynamic public var osaByFacingPercentage: Swift.Double
  @objc dynamic public var products: Realm.RLMArray<IrLibSwift.VisitWidgetProduct>
  @objc dynamic public var brandOwnerId: Swift.String
  @objc dynamic public var brandOwnerName: Swift.String
  @objc dynamic public var assortmentGroups: Realm.RLMArray<IrLibSwift.VisitWidgetAssortmentGroup>
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UserAnkets : Realm.RLMObject {
  @objc dynamic public var visit_id: Swift.String
  @objc dynamic public var anket_id: Swift.Int
  @objc dynamic public var is_sended: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RealmInt : Realm.RLMObject {
  @objc dynamic public var integerValue: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func register<T>(cellWithXib cell: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func registerClass<T>(cell: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(view: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(withClass: T.Type, indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func register<T>(cell: T) where T : UIKit.UICollectionViewCell
}
@_inheritsConvenienceInitializers @objc public class WidgetsControlManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultProductGroup : Realm.RLMObject {
  @objc dynamic public var name: Swift.String
  @objc dynamic public var code: Swift.String
  @objc dynamic public var value: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol TaskDetailsModuleOutput {
  @objc func didTriggerStartShootingForTaskWithId(_ taskId: Swift.String?, valuesUpdateHandler: @escaping (() -> Swift.Void))
  @objc func didTriggerOpenOsaReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenSosReportForTaskWithId(_ taskId: Swift.String?)
  @objc func didTriggerOpenPriceExecutionReportForTaskWithId(_ taskId: Swift.String?)
}
public struct ComplexShadow {
}
@_inheritsConvenienceInitializers @objc public class IRNotification : ObjectiveC.NSObject {
  @objc public static let authErrorNotification: Foundation.Notification.Name
  @objc public static let photoSyncUpdateNotification: Foundation.Notification.Name
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultValue : Realm.RLMObject {
  @objc dynamic public var id: Swift.String
  @objc dynamic public var name: Swift.String?
  @objc dynamic public var plan: Swift.Int
  @objc dynamic public var fact: Swift.Int
  @objc dynamic public var productCategoryName: Swift.String?
  @objc dynamic public var miniature: Swift.String?
  @objc dynamic public var state: Swift.String?
  @objc dynamic public var reasonId: Swift.Int
  @objc dynamic public var comment: Swift.String?
  @objc dynamic public var isUserBrand: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol IRDataManagerProtocol {
  @objc func fetchStores(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc static func clearStoresLoadDate()
  @objc func createVisit(storeId: Swift.Int, externalStoreId: Swift.String?) throws -> Swift.String
  @objc func sendCurrentVisit()
  @objc func fetchRecognitionResult(photoId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func photosReadyToSend(visitId: Swift.String?) -> [IrLibSwift.Photo]
  @objc func photosReadyToSend() -> [IrLibSwift.Photo]
  @objc func sendReadyPhoto(_ photoId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func recognitionResultRecivedCompletelyForPhoto(id: Swift.String) -> Swift.Bool
  @objc func photosWithNoRecognitionResult() -> [IrLibSwift.Photo]
  @objc func canDoRecognitionResult(photoId: Swift.String) -> Swift.Bool
  @objc func updateCurrentStore(storeId: Swift.Int, externalStoreId: Swift.String?)
  @objc func updateExternalData(visitId: Swift.String)
  @objc static func updateExternalData(visitId: Swift.String)
  @objc static func clearExternalData()
  @objc func updateCurrentUser(name: Swift.String, externalId: Swift.String)
  @objc func updateSettings(from settings: IrLibSwift.IRDataManagerSettings)
  @objc func fetchWidgets(visitId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func visitsWithNoWidgets() -> [IrLibSwift.Visit]
  @objc func defaultMatrixFromVisit(visitId: Swift.String, widgetType: Swift.String, taskId: Swift.String?) -> IrLibSwift.VisitWidgetMatrix?
  @objc func widgetMacroCategoriesForVisit(visitId: Swift.String, widgetType: Swift.String, matrixType: Swift.String?, taskId: Swift.String?) -> [IrLibSwift.VisitWidgetMacroCategory]?
  @objc func widgetMatrixForVisit(visitId: Swift.String, widgetType: Swift.String, matrixType: Swift.String, taskId: Swift.String?) -> IrLibSwift.VisitWidgetMatrix?
  @objc func widgetMatricesForVisit(visitId: Swift.String, widgetType: Swift.String, taskId: Swift.String?) -> [IrLibSwift.VisitWidgetMatrix]?
  @objc func widgetTasksForVisit(visitId: Swift.String, widgetType: Swift.String) -> [IrLibSwift.VisitWidgetTasksData]?
  @objc func updateProductForVisit(visitId: Swift.String, widgetType: Swift.String, matrixType: Swift.String, taskId: Swift.String?, macroCategoryId: Swift.String, productId: Swift.String, reasonId: Swift.Int, comment: Swift.String?)
  @objc func fetchSegments(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func fetchTasks(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func fetchVisitsPlansAndFacts(completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func fetchPreviousVisits(limit: Swift.Int, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func downloadPhotosForPreviousVisits(visitId: Swift.String?, limit: Swift.Int, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func updatePhotoResultIntervals(_ intervals: [Swift.Int])
  @objc func deletePhotoWithId(_ id: Swift.String)
  @objc func cancelRequests()
  @objc func internalTaskId(externalVisitId: Swift.String, taskId: Swift.String?) -> Swift.String?
  @objc func logScreenTimeEvent(id: Swift.String, name: Swift.String, duration: Swift.Int)
  @objc func deletePhotoWithIdWithoutQueue(_ id: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func deletedPhotosReadyToSend() -> [IrLibSwift.DeletedPhoto]
  @objc func readyToSendSentOrFinishedPhotos(sceneId: Swift.String) -> [IrLibSwift.Photo]
}
@_inheritsConvenienceInitializers @objc public class ProductGroup : Realm.RLMObject {
  @objc dynamic public var visit_id: Swift.String
  @objc dynamic public var product_group_code: Swift.String
  @objc dynamic public var product_group_name: Swift.String
  @objc dynamic public var main: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Ankets : Realm.RLMObject {
  @objc dynamic public var default_: Swift.String
  @objc dynamic public var id: Swift.Int
  @objc dynamic public var name: Swift.String
  @objc dynamic public var store_id: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class RecognitionResultOldAssortment : Realm.RLMObject {
  @objc dynamic public var assortmentAchievement: Realm.RLMArray<IrLibSwift.RecognitionResultAssortmentAchievement>
  @objc dynamic public var lackOfAssortment: IrLibSwift.RecognitionResultLack?
  @objc dynamic public var performanceAssortment: Swift.Int
  @objc dynamic public var lackOfAssortmentDelta: Swift.Int
  @objc dynamic public var performanceAssortmentDelta: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WidgetsViewController {
  @objc func load()
}
@objc @_inheritsConvenienceInitializers public class DefaultWidgetsViewController : ObjectiveC.NSObject, IrLibSwift.WidgetsViewController {
  @objc public func load()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Questions : Realm.RLMObject {
  @objc dynamic public var id: Swift.Int
  @objc dynamic public var anket_id: Swift.Int
  @objc dynamic public var name: Swift.String
  @objc dynamic public var type: Swift.Int
  @objc dynamic public var required: Swift.Int
  @objc dynamic public var store_id: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension IrLibSwift.GradientDirection : Swift.Equatable {}
extension IrLibSwift.GradientDirection : Swift.Hashable {}
extension IrLibSwift.IRLocationErrorBlockType : Swift.Equatable {}
extension IrLibSwift.IRLocationErrorBlockType : Swift.Hashable {}
extension IrLibSwift.IRLocationErrorBlockType : Swift.RawRepresentable {}
extension IrLibSwift.IRPhotoApproveMode : Swift.Equatable {}
extension IrLibSwift.IRPhotoApproveMode : Swift.Hashable {}
extension IrLibSwift.IRPhotoApproveMode : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension IrLibSwift.NetworkReachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension IrLibSwift.NetworkReachability.NetworkStatus : Swift.Hashable {}
extension IrLibSwift.NetworkReachability.Connection : Swift.Equatable {}
extension IrLibSwift.NetworkReachability.Connection : Swift.Hashable {}
extension IrLibSwift.VisitWidgetProduct.IRPriceStatus : Swift.Equatable {}
extension IrLibSwift.VisitWidgetProduct.IRPriceStatus : Swift.Hashable {}
extension IrLibSwift.VisitWidgetProduct.IRPriceStatus : Swift.RawRepresentable {}
extension IrLibSwift.VisitWidgetProduct.IRPriceType : Swift.Equatable {}
extension IrLibSwift.VisitWidgetProduct.IRPriceType : Swift.Hashable {}
extension IrLibSwift.VisitWidgetProduct.IRPriceType : Swift.RawRepresentable {}
extension IrLibSwift.Photo.IRPhotoState : Swift.Equatable {}
extension IrLibSwift.Photo.IRPhotoState : Swift.Hashable {}
extension IrLibSwift.Photo.IRPhotoState : Swift.RawRepresentable {}
extension IrLibSwift.Photo.IRPhotoErrorState : Swift.Equatable {}
extension IrLibSwift.Photo.IRPhotoErrorState : Swift.Hashable {}
extension IrLibSwift.Photo.IRPhotoErrorState : Swift.RawRepresentable {}
extension IrLibSwift.IRNetworkError : Swift.Equatable {}
extension IrLibSwift.IRNetworkError : Swift.Hashable {}
extension IrLibSwift.IRNetworkError : Swift.RawRepresentable {}
extension IrLibSwift.DeletedPhoto.IRDeletedPhotoState : Swift.Equatable {}
extension IrLibSwift.DeletedPhoto.IRDeletedPhotoState : Swift.Hashable {}
extension IrLibSwift.DeletedPhoto.IRDeletedPhotoState : Swift.RawRepresentable {}
